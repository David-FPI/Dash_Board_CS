import streamlit as st
import pandas as pd
import math
from pathlib import Path
import plotly.express as px
import os
os.system("pip install openpyxl")

# Set the title and favicon that appear in the Browser's tab bar.
st.set_page_config(
    page_title='KPI dashboard Tool',
    page_icon=':earth_americas:',
)
import streamlit as st
import pandas as pd
import re
import os
os.system("pip install openpyxl")

st.set_page_config(page_title="ƒê·ªçc t√™n nh√¢n vi√™n", page_icon="üìä")

# =====================
# H√†m chu·∫©n h√≥a t√™n nh√¢n vi√™n
def clean_employee_name(name: str) -> str:
    name = str(name).strip()
    name = re.sub(r"\n.*", "", name)  # Xo√° ph·∫ßn sau xu·ªëng d√≤ng n·∫øu c√≥
    name = re.sub(r"\(.*?\)", "", name)  # Xo√° ghi ch√∫ trong ngo·∫∑c ()
    name = re.sub(r"\s+", " ", name)  # Chu·∫©n ho√° kho·∫£ng tr·∫Øng
    return name.strip()

# =====================
# H√†m tr√≠ch xu·∫•t t·ª´ng sheet
def extract_data_from_sheet(sheet_df, sheet_name):
    data = []
    current_nv = None
    rows = sheet_df.shape[0]

    i = 3  # b·∫Øt ƒë·∫ßu t·ª´ d√≤ng 4
    while i < rows:
        row = sheet_df.iloc[i]
        name_cell = str(row[1]).strip() if pd.notna(row[1]) else ""

        if name_cell and name_cell.lower() not in ["nan", "ÁªÑÂëòÂêçÂ≠ó", "Ë°®Ê†º‰∏çË¶ÅÂÅö‰ªª‰ΩïË∞ÉÊï¥ÔºåÈô§Ââç‰∏§ÂàóÔºåÂÖ∂‰ΩôÂÖ®ÊòØÂÖ¨Âºè"]:
            current_nv = name_cell
            for j in range(i, i + 6):
                if j >= rows:
                    break
                sub_row = sheet_df.iloc[j]
                nguon = sub_row[2]
                if pd.isna(nguon) or str(nguon).strip() in ["", "0"]:
                    break
                data.append({
                    "Nh√¢n vi√™n": current_nv.strip(),
                    "Ngu·ªìn": str(nguon).strip(),
                    "Sheet": sheet_name
                })
            i += 6
        else:
            i += 1
    return data

# =====================
# H√†m ƒë·ªçc to√†n b·ªô file Excel
def extract_all_data(file):
    xls = pd.ExcelFile(file)
    all_rows = []

    for sheet_name in xls.sheet_names:
        try:
            df = pd.read_excel(xls, sheet_name=sheet_name, header=None)
            if df.shape[0] < 10 or df.shape[1] < 5:
                continue
            extracted = extract_data_from_sheet(df, sheet_name)
            all_rows.extend(extracted)
        except Exception as e:
            st.warning(f"‚ùå L·ªói ·ªü sheet '{sheet_name}': {e}")

    return pd.DataFrame(all_rows)

# =====================
# Upload file
uploaded_files = st.file_uploader("üì• K√©o nhi·ªÅu file Excel v√†o ƒë√¢y", type=["xlsx"], accept_multiple_files=True)

if uploaded_files:
    all_data = []
    for file in uploaded_files:
        st.write(f"üìÇ ƒêang x·ª≠ l√Ω: `{file.name}`")
        df = extract_all_data(file)
        all_data.append(df)

    df_all = pd.concat(all_data, ignore_index=True)

    # Chu·∫©n ho√° t√™n nh√¢n vi√™n
    df_all["Nh√¢n vi√™n chu·∫©n"] = df_all["Nh√¢n vi√™n"].apply(clean_employee_name)

    st.subheader("‚úÖ Danh s√°ch nh√¢n vi√™n ƒë√£ chu·∫©n h√≥a")
    st.dataframe(df_all[["Nh√¢n vi√™n", "Nh√¢n vi√™n chu·∫©n", "Sheet"]].drop_duplicates(), use_container_width=True)

    st.success(f"T·ªïng s·ªë d√≤ng d·ªØ li·ªáu: {len(df_all)} ‚Äî Nh√¢n vi√™n duy nh·∫•t: {df_all['Nh√¢n vi√™n chu·∫©n'].nunique()}")

else:
    st.info("üìé Vui l√≤ng upload file Excel ƒë·ªÉ b·∫Øt ƒë·∫ßu.")

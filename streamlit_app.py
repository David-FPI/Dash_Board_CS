import streamlit as st
import pandas as pd
import math
from pathlib import Path
import plotly.express as px
import os
os.system("pip install openpyxl")

# Set the title and favicon that appear in the Browser's tab bar.
st.set_page_config(
    page_title='GDP dashboard',
    page_icon=':earth_americas:', # This is an emoji shortcode. Could be a URL too.
)

# === Upload file ===
uploaded_file = st.file_uploader("üì• K√©o file Excel v√†o ƒë√¢y", type=["xlsx"])
xls = pd.ExcelFile(uploaded_file)
ket_ban_rows = []
if uploaded_file:

    def extract_data_from_sheet(sheet_df, sheet_name):
        data = []
        current_nv = None
        rows = sheet_df.shape[0]

        i = 3  # B·∫Øt ƒë·∫ßu t·ª´ d√≤ng 4 (index 3), b·ªè qua header
        while i < rows:
            row = sheet_df.iloc[i]
            name_cell = str(row[1]).strip() if pd.notna(row[1]) else ""

            # N·∫øu c√≥ t√™n nh√¢n vi√™n h·ª£p l·ªá
            if name_cell and name_cell.lower() not in ["nan", "ÁªÑÂëòÂêçÂ≠ó", "Ë°®Ê†º‰∏çË¶ÅÂÅö‰ªª‰ΩïË∞ÉÊï¥ÔºåÈô§Ââç‰∏§ÂàóÔºåÂÖ∂‰ΩôÂÖ®ÊòØÂÖ¨Âºè"]:
                current_nv = name_cell

                # ƒê·ªçc 6 d√≤ng ngu·ªìn k·∫ø ti·∫øp
                for j in range(i, i + 6):
                    if j >= rows:
                        break
                    sub_row = sheet_df.iloc[j]
                    nguon = sub_row[2]
                    if pd.isna(nguon) or str(nguon).strip() in ["", "0"]:
                        break
                    data.append({
                        "Nh√¢n vi√™n": current_nv.strip(),
                        "Ngu·ªìn": str(nguon).strip(),
                        "T∆∞∆°ng t√°c ‚â•10 c√¢u": pd.to_numeric(sub_row[15], errors="coerce"),
                        "Group Zalo": pd.to_numeric(sub_row[18], errors="coerce"),
                        "Sheet": sheet_name
                    })
                i += 6
            else:
                i += 1
        return data

    def extract_all_data(file):
        xls = pd.ExcelFile(file)
        all_rows = []

        for sheet_name in xls.sheet_names:
            try:
                df = pd.read_excel(xls, sheet_name=sheet_name, header=None)
                if df.shape[0] < 10 or df.shape[1] < 19:
                    continue
                extracted = extract_data_from_sheet(df, sheet_name)
                all_rows.extend(extracted)
            except Exception as e:
                st.warning(f"‚ùå L·ªói ·ªü sheet '{sheet_name}': {e}")

        return pd.DataFrame(all_rows)

    # === X·ª≠ l√Ω file upload
    df_all = extract_all_data(uploaded_file)

    # === Chu·∫©n h√≥a t√™n nh√¢n vi√™n
    df_all["Nh√¢n vi√™n chu·∫©n"] = (
        df_all["Nh√¢n vi√™n"]
        .astype(str)
        .str.replace(r"\n.*", "", regex=True)
        .str.strip()
    )

    # === T·ªïng h·ª£p KPI theo nh√¢n vi√™n
    df_summary = (
        df_all.groupby("Nh√¢n vi√™n chu·∫©n")
        .agg({
            "T∆∞∆°ng t√°c ‚â•10 c√¢u": "sum",
            "Group Zalo": "sum"
        })
        .rename(columns={
            "T∆∞∆°ng t√°c ‚â•10 c√¢u": "T·ªïng TT ‚â•10 c√¢u",
            "Group Zalo": "T·ªïng Group Zalo"
        })
        .reset_index()
        .sort_values(by="T·ªïng TT ‚â•10 c√¢u", ascending=False)
    )
# === T√≠nh th√™m c·ªôt Hi·ªáu su·∫•t (Group Zalo / T∆∞∆°ng t√°c ‚â•10 c√¢u) * 100
    df_summary["Hi·ªáu su·∫•t nh√¢n vi√™n (%)"] = (
        (df_summary["T·ªïng Group Zalo"] / df_summary["T·ªïng TT ‚â•10 c√¢u"]) * 100
    ).round(2).fillna(0)

    st.subheader("üìã B·∫£ng T·ªïng h·ª£p T∆∞∆°ng T√°c & Group Zalo theo Nh√¢n Vi√™n")
    st.dataframe(df_summary, use_container_width=True)

    st.success(f"T·ªïng s·ªë nh√¢n vi√™n: {df_summary['Nh√¢n vi√™n chu·∫©n'].nunique()}")
# === T·ªïng h·ª£p theo t·ª´ng sheet + nh√¢n vi√™n chu·∫©n
    df_by_sheet = (
        df_all.groupby(["Sheet", "Nh√¢n vi√™n chu·∫©n"])
        .agg({
            "T∆∞∆°ng t√°c ‚â•10 c√¢u": "sum",
            "Group Zalo": "sum"
        })
        .rename(columns={
            "T∆∞∆°ng t√°c ‚â•10 c√¢u": "TT ‚â•10 c√¢u",
            "Group Zalo": "Group Zalo"
        })
        .reset_index()
        .sort_values(by=["Nh√¢n vi√™n chu·∫©n", "Sheet"])
    )
    
    st.subheader("üìä B·∫£ng Ch·ªâ S·ªë T∆∞∆°ng T√°c & Group Zalo Theo T·ª´ng Sheet")
    st.dataframe(df_by_sheet, use_container_width=True)


# === Sau khi df_all ƒë√£ ƒë∆∞·ª£c x·ª≠ l√Ω v√† c√≥ c·ªôt "Nh√¢n vi√™n chu·∫©n" ===
    
 # === V·∫Ω bi·ªÉu ƒë·ªì KPI theo th·ªùi gian
    kpi_over_time = (
        df_all.groupby(["Sheet", "Nh√¢n vi√™n chu·∫©n"])
        .agg({
            "T∆∞∆°ng t√°c ‚â•10 c√¢u": "sum",
            "Group Zalo": "sum"
        })
        .reset_index()
        .rename(columns={
            "T∆∞∆°ng t√°c ‚â•10 c√¢u": "T∆∞∆°ng t√°c",
            "Group Zalo": "Group"
        })
    )

    st.subheader(":bar_chart: Bi·ªÉu ƒë·ªì KPI theo th·ªùi gian")

    unique_employees = kpi_over_time["Nh√¢n vi√™n chu·∫©n"].unique().tolist()
    selected_employees = st.multiselect(
        "Ch·ªçn nh√¢n vi√™n c·∫ßn xem:", unique_employees, default=unique_employees[:5]
    )

    kpi_option = st.selectbox(
        "Ch·ªçn KPI mu·ªën theo d√µi:",
        ["T∆∞∆°ng t√°c", "Group"]
    )

    filtered_df = kpi_over_time[kpi_over_time["Nh√¢n vi√™n chu·∫©n"].isin(selected_employees)]

    if filtered_df.empty:
        st.warning("‚ö†Ô∏è Kh√¥ng c√≥ d·ªØ li·ªáu ƒë·ªÉ hi·ªÉn th·ªã. Vui l√≤ng ch·ªçn nh√¢n vi√™n c√≥ d·ªØ li·ªáu.")
    else:
        fig = px.line(
            filtered_df,
            x="Sheet",
            y=kpi_option,
            color="Nh√¢n vi√™n chu·∫©n",
            markers=True,
            title=f"Bi·ªÉu ƒë·ªì {kpi_option} qua c√°c Sheet"
        )
        fig.update_layout(
            xaxis_title="Sheet",
            yaxis_title=kpi_option,
            legend_title="Nh√¢n vi√™n",
            hovermode="x unified",
            height=500
        )
        st.plotly_chart(fig, use_container_width=True)
# L·∫•y d·ªØ li·ªáu c·ªôt "T·ªïng s·ªë k·∫øt b·∫°n trong ng√†y" t·ª´ t·∫•t c·∫£ c√°c sheet v√† group by nh√¢n vi√™n chu·∫©n
    
    def extract_friend_adds(xls):
        all_data = []
    
        for sheet in xls.sheet_names:
            try:
                df = pd.read_excel(xls, sheet_name=sheet, header=None)
    
                if df.shape[0] < 10 or df.shape[1] < 13:
                    continue
    
                i = 3  # B·ªè qua 3 d√≤ng ƒë·∫ßu
                current_nv = None
    
                while i < df.shape[0]:
                    row = df.iloc[i]
                    name = str(row[1]).strip() if pd.notna(row[1]) else ""
    
                    if name and name.lower() not in ["nan", "ÁªÑÂëòÂêçÂ≠ó", "Ë°®Ê†º‰∏çË¶ÅÂÅö‰ªª‰ΩïË∞ÉÊï¥ÔºåÈô§Ââç‰∏§ÂàóÔºåÂÖ∂‰ΩôÂÖ®ÊòØÂÖ¨Âºè"]:
                        current_nv = name
                        for j in range(i, i + 6):
                            if j >= df.shape[0]:
                                break
                            sub_row = df.iloc[j]
                            name_in_loop = str(sub_row[1]).strip()
                            if pd.isna(sub_row[2]) or str(sub_row[2]).strip() == "":
                                break
                            friend_adds = pd.to_numeric(sub_row[9], errors="coerce")
                            all_data.append({
                                "Sheet": sheet,
                                "Nh√¢n vi√™n": current_nv,
                                "K·∫øt b·∫°n trong ng√†y": friend_adds
                            })
                        i += 6
                    else:
                        i += 1
            except Exception as e:
                continue
    
        return pd.DataFrame(all_data)
    
    df_friends = extract_friend_adds(xls)
    
    # Chu·∫©n h√≥a t√™n nh√¢n vi√™n
    df_friends["Nh√¢n vi√™n chu·∫©n"] = df_friends["Nh√¢n vi√™n"].astype(str).str.replace(r"\n.*", "", regex=True).str.strip()
    
    # T·ªïng h·ª£p
    friend_summary = (
        df_friends.groupby("Nh√¢n vi√™n chu·∫©n")["K·∫øt b·∫°n trong ng√†y"]
        .sum()
        .reset_index()
        .sort_values(by="K·∫øt b·∫°n trong ng√†y", ascending=False)
    )
    
    friend_summary.head(10)

else:
    st.info("üìé Vui l√≤ng t·∫£i l√™n file Excel b√°o c√°o ƒë·ªÉ b·∫Øt ƒë·∫ßu.")

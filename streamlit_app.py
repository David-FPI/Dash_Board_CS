import unicodedata
import re
import pandas as pd
import streamlit as st

# ‚úÖ H√†m chu·∫©n h√≥a text: b·ªè d·∫•u, lowercase, b·ªè kho·∫£ng tr·∫Øng th·ª´a
def normalize_text(text):
    if not isinstance(text, str):
        return ""
    text = text.strip().lower()
    text = unicodedata.normalize('NFD', text)
    text = ''.join(ch for ch in text if unicodedata.category(ch) != 'Mn')
    text = re.sub(r'\s+', ' ', text)
    return text

# ‚úÖ Danh s√°ch keyword cho c·ªôt "T∆∞∆°ng t√°c ‚â•10 c√¢u"
KEYWORDS_TUONG_TAC = [
    "‚â•10", ">=10", "10 c√¢u", "tuong tac", "s·ªë l∆∞·ª£ng t∆∞∆°ng t√°c", "t∆∞∆°ng t√°c 10 c√¢u", "t∆∞∆°ng t√°c",
    "‰∫íÂä®", "s·ªë c√¢u h·ªèi", "t∆∞∆°ng t√°c v·ªõi kh√°ch", "‚â•10Âè•", "‰∫íÂä®Ê¨°Êï∞"
]

# ‚úÖ Danh s√°ch keyword cho c·ªôt "L∆∞·ª£ng tham gia group Zalo"
KEYWORDS_GROUP_ZALO = [
    "group zalo", "zalo group", "tham gia group", "tham gia zalo", "nh√≥m zalo", "zalo nh√≥m",
    "zalo tham gia", "Âä†zaloÁæ§", "Âä†ÂÖ•zaloÁæ§Êï∞Èáè", "v√†o group zalo", "v√†o nh√≥m zalo"
]

# ‚úÖ H√†m nh·∫≠n di·ªán c·ªôt theo t·ª´ kh√≥a
def is_tuong_tac_column(col):
    normalized = normalize_text(col)
    return any(keyword.lower() in normalized for keyword in KEYWORDS_TUONG_TAC)

def is_group_zalo_column(col):
    normalized = normalize_text(col)
    return any(keyword.lower() in normalized for keyword in KEYWORDS_GROUP_ZALO)

# ‚úÖ H√†m d√≤ v√† g√°n nh√£n KPI t·ª´ danh s√°ch ti√™u ƒë·ªÅ
def detect_kpi_columns(columns):
    result = {}
    for col in columns:
        if is_tuong_tac_column(col):
            result["T∆∞∆°ng t√°c ‚â•10 c√¢u"] = col
        elif is_group_zalo_column(col):
            result["L∆∞·ª£ng tham gia group Zalo"] = col
    return result

# ‚úÖ H√†m chu·∫©n h√≥a t√™n nh√¢n vi√™n
def normalize_name(name):
    if not isinstance(name, str):
        return ""
    name = name.strip()
    name = re.sub(r'\s+', ' ', name)
    name = name.title()
    return name

# ‚úÖ T·ªïng h·ª£p d·ªØ li·ªáu KPI t·ª´ nhi·ªÅu sheet
def summarize_kpi_across_sheets(sheet_data_list):
    all_data = []

    for sheet_data in sheet_data_list:
        df = sheet_data['data']
        kpi_columns = sheet_data['kpi_columns']
        staff_column = sheet_data['staff_column']

        if not staff_column or not kpi_columns:
            continue

        # Ch·ªâ l·∫•y 2 KPI quan tr·ªçng
        selected_kpi = {
            "T∆∞∆°ng t√°c ‚â•10 c√¢u": kpi_columns.get("T∆∞∆°ng t√°c ‚â•10 c√¢u"),
            "L∆∞·ª£ng tham gia group Zalo": kpi_columns.get("L∆∞·ª£ng tham gia group Zalo")
        }
        selected_kpi = {k: v for k, v in selected_kpi.items() if v}

        if not selected_kpi:
            continue

        columns_to_keep = [staff_column] + list(selected_kpi.values())
        df_filtered = df[columns_to_keep].copy()

        # Chu·∫©n h√≥a t√™n nh√¢n vi√™n
        df_filtered[staff_column] = df_filtered[staff_column].apply(normalize_name)

        # ƒê·ªïi t√™n c·ªôt KPI theo chu·∫©n
        df_filtered = df_filtered.rename(columns={v: k for k, v in selected_kpi.items()})

        all_data.append(df_filtered)

    if not all_data:
        return pd.DataFrame()

    combined_df = pd.concat(all_data, ignore_index=True)
    summary = combined_df.groupby(staff_column, dropna=False).sum(numeric_only=True).reset_index()
    return summary

# ‚úÖ Giao di·ªán ch·∫°y tr·ª±c ti·∫øp b·∫±ng Streamlit
st.set_page_config(page_title="üìä KPI Dashboard", layout="wide")
st.title("üìä Dashboard KPI Nh√¢n Vi√™n t·ª´ File Excel")

uploaded_files = st.file_uploader("K√©o & th·∫£ nhi·ªÅu file Excel v√†o ƒë√¢y", type=["xlsx"], accept_multiple_files=True)

if uploaded_files:
    sheet_data_list = []
    for file in uploaded_files:
        xls = pd.ExcelFile(file)
        for sheet_name in xls.sheet_names:
            try:
                df = pd.read_excel(xls, sheet_name=sheet_name, skiprows=2)
                columns = df.columns.tolist()
                kpi_cols = detect_kpi_columns(columns)
                # T√¨m c·ªôt nh√¢n vi√™n (∆∞u ti√™n c·ªôt c√≥ ch·ªØ "t√™n nh√¢n vi√™n" ho·∫∑c t√™n ·ªü c·ªôt B)
                staff_col = df.columns[1] if len(df.columns) > 1 else None
                sheet_data_list.append({
                    'data': df,
                    'kpi_columns': kpi_cols,
                    'staff_column': staff_col
                })
            except Exception as e:
                st.warning(f"‚ùó Sheet {sheet_name} l·ªói: {e}")

    result_df = summarize_kpi_across_sheets(sheet_data_list)
    if not result_df.empty:
        st.success("‚úÖ ƒê√£ t·ªïng h·ª£p xong d·ªØ li·ªáu KPI")
        st.dataframe(result_df, use_container_width=True)
        st.download_button("üì• T·∫£i v·ªÅ file t·ªïng h·ª£p", data=result_df.to_csv(index=False).encode('utf-8-sig'), file_name="kpi_tong_hop.csv", mime="text/csv")
    else:
        st.error("‚ùå Kh√¥ng c√≥ d·ªØ li·ªáu n√†o ph√π h·ª£p ƒë·ªÉ t·ªïng h·ª£p.")

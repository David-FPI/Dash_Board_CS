import streamlit as st
import pandas as pd
import re
import os

os.system("pip install openpyxl")

st.set_page_config(page_title="üìä ƒê·ªçc t√™n nh√¢n vi√™n", page_icon="üë©‚Äçüíº")

# =====================
# üîß H√†m chu·∫©n h√≥a t√™n nh√¢n vi√™n
def clean_employee_name(name: str) -> str:
    name = str(name).strip()
    name = re.sub(r"\n.*", "", name)
    name = re.sub(r"\(.*?\)", "", name)
    name = re.sub(r"\s+", " ", name)
    return name.strip().title()


# =====================
# üì• ƒê·ªçc t·ª´ng sheet
def extract_data_from_sheet(sheet_df, sheet_name):
    data = []
    rows = sheet_df.shape[0]

    sheet_df[1] = sheet_df[1].fillna(method='ffill')  # fill t√™n nh√¢n vi√™n t·ª´ merge
    current_nv = None
    empty_count = 0

    for i in range(3, rows):  # b·ªè 3 d√≤ng ƒë·∫ßu
        row = sheet_df.iloc[i]

        # X√°c ƒë·ªãnh t√™n nh√¢n vi√™n t·ª´ c·ªôt B
        if pd.notna(row[1]):
            name_cell = str(row[1]).strip()
            if name_cell.lower() in ["ÁªÑÂëòÂêçÂ≠ó", "ÁªüËÆ°", "Ë°®Ê†º‰∏çË¶Å l√†m g√¨", "t·ªïng"]:
                continue
            current_nv = re.sub(r"\(.*?\)", "", name_cell).strip()

        # N·∫øu kh√¥ng c√≥ t√™n th√¨ b·ªè qua
        if not current_nv:
            continue

        # X√°c ƒë·ªãnh ngu·ªìn t·ª´ c·ªôt C
        nguon = str(row[2]).strip() if pd.notna(row[2]) else ""
        if nguon == "" or nguon.lower() == "nan":
            empty_count += 1
            if empty_count >= 2:
                break  # k·∫øt th√∫c kh·ªëi d·ªØ li·ªáu n·∫øu tr·ªëng li√™n ti·∫øp 2 d√≤ng
            continue
        else:
            empty_count = 0

        # L∆∞u l·∫°i d√≤ng h·ª£p l·ªá
        data.append({
            "Nh√¢n vi√™n": current_nv,
            "Ngu·ªìn": nguon,
            "T∆∞∆°ng t√°c ‚â•10 c√¢u": pd.to_numeric(row[15], errors="coerce"),
            "Group Zalo": pd.to_numeric(row[18], errors="coerce"),
            "K·∫øt b·∫°n trong ng√†y": pd.to_numeric(row[12], errors="coerce"),
            "Sheet": sheet_name
        })

    return data


# =====================
# üì§ ƒê·ªçc to√†n b·ªô file Excel
def extract_all_data(file):
    xls = pd.ExcelFile(file)
    all_rows = []

    for sheet_name in xls.sheet_names:
        try:
            df = pd.read_excel(xls, sheet_name=sheet_name, header=None)
            if df.shape[0] < 10 or df.shape[1] < 5:
                continue
            extracted = extract_data_from_sheet(df, sheet_name)
            all_rows.extend(extracted)
        except Exception as e:
            st.warning(f"‚ùå L·ªói ·ªü sheet '{sheet_name}': {e}")

    return pd.DataFrame(all_rows)


# =====================
# Giao di·ªán upload
st.title("üì• ƒê·ªçc T√™n Nh√¢n Vi√™n T·ª´ File Excel B√°o C√°o")

uploaded_files = st.file_uploader("K√©o & th·∫£ nhi·ªÅu file Excel v√†o ƒë√¢y", type=["xlsx"], accept_multiple_files=True)

if uploaded_files:
    all_data = []
    for file in uploaded_files:
        st.write(f"üìÇ ƒêang x·ª≠ l√Ω: `{file.name}`")
        df = extract_all_data(file)
        all_data.append(df)

    df_all = pd.concat(all_data, ignore_index=True)

    if not df_all.empty:
        # Chu·∫©n h√≥a t√™n nh√¢n vi√™n
        df_all["Nh√¢n vi√™n chu·∫©n"] = df_all["Nh√¢n vi√™n"].apply(clean_employee_name)

        st.subheader("‚úÖ Danh s√°ch Nh√¢n vi√™n ƒë√£ chu·∫©n h√≥a")
        st.dataframe(df_all[["Nh√¢n vi√™n", "Nh√¢n vi√™n chu·∫©n", "Sheet"]].drop_duplicates(), use_container_width=True)

        st.success(f"‚úÖ T·ªïng s·ªë d√≤ng d·ªØ li·ªáu: {len(df_all)} ‚Äî üë©‚Äçüíª Nh√¢n vi√™n duy nh·∫•t: {df_all['Nh√¢n vi√™n chu·∫©n'].nunique()}")
    else:
        st.warning("‚ùó Kh√¥ng c√≥ d·ªØ li·ªáu n√†o ƒë∆∞·ª£c tr√≠ch xu·∫•t. Vui l√≤ng ki·ªÉm tra l·∫°i file.")
else:
    st.info("üìé Vui l√≤ng upload file Excel ƒë·ªÉ b·∫Øt ƒë·∫ßu.")

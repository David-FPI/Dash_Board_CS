import streamlit as st
import pandas as pd
import math
from pathlib import Path
import plotly.express as px
import os
os.system("pip install openpyxl")

# Set the title and favicon that appear in the Browser's tab bar.
st.set_page_config(
    page_title='GDP dashboard',
    page_icon=':earth_americas:', # This is an emoji shortcode. Could be a URL too.
)

# # -----------------------------------------------------------------------------
# # Declare some useful functions.

# @st.cache_data
# def get_gdp_data():
#     """Grab GDP data from a CSV file.

#     This uses caching to avoid having to read the file every time. If we were
#     reading from an HTTP endpoint instead of a file, it's a good idea to set
#     a maximum age to the cache with the TTL argument: @st.cache_data(ttl='1d')
#     """

#     # Instead of a CSV on disk, you could read from an HTTP endpoint here too.
#     DATA_FILENAME = Path(__file__).parent/'data/gdp_data.csv'
#     raw_gdp_df = pd.read_csv(DATA_FILENAME)

#     MIN_YEAR = 1960
#     MAX_YEAR = 2022

#     # The data above has columns like:
#     # - Country Name
#     # - Country Code
#     # - [Stuff I don't care about]
#     # - GDP for 1960
#     # - GDP for 1961
#     # - GDP for 1962
#     # - ...
#     # - GDP for 2022
#     #
#     # ...but I want this instead:
#     # - Country Name
#     # - Country Code
#     # - Year
#     # - GDP
#     #
#     # So let's pivot all those year-columns into two: Year and GDP
#     gdp_df = raw_gdp_df.melt(
#         ['Country Code'],
#         [str(x) for x in range(MIN_YEAR, MAX_YEAR + 1)],
#         'Year',
#         'GDP',
#     )

#     # Convert years from string to integers
#     gdp_df['Year'] = pd.to_numeric(gdp_df['Year'])

#     return gdp_df

# gdp_df = get_gdp_data()

# # -----------------------------------------------------------------------------
# # Draw the actual page

# # Set the title that appears at the top of the page.
# '''
# # :earth_americas: GDP dashboard

# Browse GDP data from the [World Bank Open Data](https://data.worldbank.org/) website. As you'll
# notice, the data only goes to 2022 right now, and datapoints for certain years are often missing.
# But it's otherwise a great (and did I mention _free_?) source of data.
# '''

# # Add some spacing
# ''
# ''

# min_value = gdp_df['Year'].min()
# max_value = gdp_df['Year'].max()

# from_year, to_year = st.slider(
#     'Which years are you interested in?',
#     min_value=min_value,
#     max_value=max_value,
#     value=[min_value, max_value])

# countries = gdp_df['Country Code'].unique()

# if not len(countries):
#     st.warning("Select at least one country")

# selected_countries = st.multiselect(
#     'Which countries would you like to view?',
#     countries,
#     ['DEU', 'FRA', 'GBR', 'BRA', 'MEX', 'JPN'])

# ''
# ''
# ''

# # Filter the data
# filtered_gdp_df = gdp_df[
#     (gdp_df['Country Code'].isin(selected_countries))
#     & (gdp_df['Year'] <= to_year)
#     & (from_year <= gdp_df['Year'])
# ]

# st.header('GDP over time', divider='gray')

# ''

# st.line_chart(
#     filtered_gdp_df,
#     x='Year',
#     y='GDP',
#     color='Country Code',
# )

# ''
# ''


# first_year = gdp_df[gdp_df['Year'] == from_year]
# last_year = gdp_df[gdp_df['Year'] == to_year]

# st.header(f'GDP in {to_year}', divider='gray')

# ''

# cols = st.columns(4)

# for i, country in enumerate(selected_countries):
#     col = cols[i % len(cols)]

#     with col:
#         first_gdp = first_year[first_year['Country Code'] == country]['GDP'].iat[0] / 1000000000
#         last_gdp = last_year[last_year['Country Code'] == country]['GDP'].iat[0] / 1000000000

#         if math.isnan(first_gdp):
#             growth = 'n/a'
#             delta_color = 'off'
#         else:
#             growth = f'{last_gdp / first_gdp:,.2f}x'
#             delta_color = 'normal'

#         st.metric(
#             label=f'{country} GDP',
#             value=f'{last_gdp:,.0f}B',
#             delta=growth,
#             delta_color=delta_color
#         )


# === Upload file ===
uploaded_file = st.file_uploader("üì• K√©o file Excel v√†o ƒë√¢y", type=["xlsx"])
if uploaded_file:

    def extract_data_from_sheet(sheet_df, sheet_name):
        data = []
        current_nv = None
        rows = sheet_df.shape[0]

        i = 3  # B·∫Øt ƒë·∫ßu t·ª´ d√≤ng 4 (index 3), b·ªè qua header
        while i < rows:
            row = sheet_df.iloc[i]
            name_cell = str(row[1]).strip() if pd.notna(row[1]) else ""

            # N·∫øu c√≥ t√™n nh√¢n vi√™n h·ª£p l·ªá
            if name_cell and name_cell.lower() not in ["nan", "ÁªÑÂëòÂêçÂ≠ó", "Ë°®Ê†º‰∏çË¶ÅÂÅö‰ªª‰ΩïË∞ÉÊï¥ÔºåÈô§Ââç‰∏§ÂàóÔºåÂÖ∂‰ΩôÂÖ®ÊòØÂÖ¨Âºè"]:
                current_nv = name_cell

                # ƒê·ªçc 6 d√≤ng ngu·ªìn k·∫ø ti·∫øp
                for j in range(i, i + 6):
                    if j >= rows:
                        break
                    sub_row = sheet_df.iloc[j]
                    nguon = sub_row[2]
                    if pd.isna(nguon) or str(nguon).strip() in ["", "0"]:
                        break
                    data.append({
                        "Nh√¢n vi√™n": current_nv.strip(),
                        "Ngu·ªìn": str(nguon).strip(),
                        "T∆∞∆°ng t√°c ‚â•10 c√¢u": pd.to_numeric(sub_row[15], errors="coerce"),
                        "Group Zalo": pd.to_numeric(sub_row[18], errors="coerce"),
                        "Sheet": sheet_name
                    })
                i += 6
            else:
                i += 1
        return data

    def extract_all_data(file):
        xls = pd.ExcelFile(file)
        all_rows = []

        for sheet_name in xls.sheet_names:
            try:
                df = pd.read_excel(xls, sheet_name=sheet_name, header=None)
                if df.shape[0] < 10 or df.shape[1] < 19:
                    continue
                extracted = extract_data_from_sheet(df, sheet_name)
                all_rows.extend(extracted)
            except Exception as e:
                st.warning(f"‚ùå L·ªói ·ªü sheet '{sheet_name}': {e}")

        return pd.DataFrame(all_rows)

    # === X·ª≠ l√Ω file upload
    df_all = extract_all_data(uploaded_file)

    # === Chu·∫©n h√≥a t√™n nh√¢n vi√™n
    df_all["Nh√¢n vi√™n chu·∫©n"] = (
        df_all["Nh√¢n vi√™n"]
        .astype(str)
        .str.replace(r"\n.*", "", regex=True)
        .str.strip()
    )

    # === T·ªïng h·ª£p KPI theo nh√¢n vi√™n
    df_summary = (
        df_all.groupby("Nh√¢n vi√™n chu·∫©n")
        .agg({
            "T∆∞∆°ng t√°c ‚â•10 c√¢u": "sum",
            "Group Zalo": "sum"
        })
        .rename(columns={
            "T∆∞∆°ng t√°c ‚â•10 c√¢u": "T·ªïng TT ‚â•10 c√¢u",
            "Group Zalo": "T·ªïng Group Zalo"
        })
        .reset_index()
        .sort_values(by="T·ªïng TT ‚â•10 c√¢u", ascending=False)
    )
# === T√≠nh th√™m c·ªôt Hi·ªáu su·∫•t (Group Zalo / T∆∞∆°ng t√°c ‚â•10 c√¢u) * 100
    df_summary["Hi·ªáu su·∫•t nh√¢n vi√™n (%)"] = (
        (df_summary["T·ªïng Group Zalo"] / df_summary["T·ªïng TT ‚â•10 c√¢u"]) * 100
    ).round(2).fillna(0)

    st.subheader("üìã B·∫£ng T·ªïng h·ª£p T∆∞∆°ng T√°c & Group Zalo theo Nh√¢n Vi√™n")
    st.dataframe(df_summary, use_container_width=True)

    st.success(f"T·ªïng s·ªë nh√¢n vi√™n: {df_summary['Nh√¢n vi√™n chu·∫©n'].nunique()}")
# === T·ªïng h·ª£p theo t·ª´ng sheet + nh√¢n vi√™n chu·∫©n
    df_by_sheet = (
        df_all.groupby(["Sheet", "Nh√¢n vi√™n chu·∫©n"])
        .agg({
            "T∆∞∆°ng t√°c ‚â•10 c√¢u": "sum",
            "Group Zalo": "sum"
        })
        .rename(columns={
            "T∆∞∆°ng t√°c ‚â•10 c√¢u": "TT ‚â•10 c√¢u",
            "Group Zalo": "Group Zalo"
        })
        .reset_index()
        .sort_values(by=["Nh√¢n vi√™n chu·∫©n", "Sheet"])
    )
    
    st.subheader("üìä B·∫£ng Ch·ªâ S·ªë T∆∞∆°ng T√°c & Group Zalo Theo T·ª´ng Sheet")
    st.dataframe(df_by_sheet, use_container_width=True)


# === Sau khi df_all ƒë√£ ƒë∆∞·ª£c x·ª≠ l√Ω v√† c√≥ c·ªôt "Nh√¢n vi√™n chu·∫©n" ===
    
    # === T·ªïng h·ª£p theo sheet v√† nh√¢n vi√™n
    kpi_over_time = (
        df_all.groupby(["Sheet", "Nh√¢n vi√™n chu·∫©n"])
        .agg({
            "T∆∞∆°ng t√°c ‚â•10 c√¢u": "sum",
            "Group Zalo": "sum"
        })
        .reset_index()
        .rename(columns={
            "T∆∞∆°ng t√°c ‚â•10 c√¢u": "T∆∞∆°ng t√°c",
            "Group Zalo": "Group"
        })
    )
    
    st.subheader(":bar_chart: Bi·ªÉu ƒë·ªì KPI theo th·ªùi gian")
    
    # === Ch·ªçn nh√¢n vi√™n
    unique_employees = kpi_over_time["Nh√¢n vi√™n chu·∫©n"].unique().tolist()
    selected_employees = st.multiselect(
        "Ch·ªçn nh√¢n vi√™n c·∫ßn xem:", unique_employees, default=unique_employees[:5]
    )
    
    # === Ch·ªçn lo·∫°i KPI
    kpi_option = st.selectbox(
        "Ch·ªçn KPI mu·ªën theo d√µi:",
        ["T∆∞∆°ng t√°c", "Group"]
    )
    
    # === L·ªçc d·ªØ li·ªáu theo nh√¢n vi√™n
    filtered_df = kpi_over_time[kpi_over_time["Nh√¢n vi√™n chu·∫©n"].isin(selected_employees)]
    
    # === V·∫Ω bi·ªÉu ƒë·ªì Line Chart
    fig = px.line(
        filtered_df,
        x="Sheet",
        y=kpi_option,
        color="Nh√¢n vi√™n chu·∫©n",
        markers=True,
        title=f"Bi·ªÉu ƒë·ªì {kpi_option} qua c√°c Sheet"
    )
    fig.update_layout(
        xaxis_title="Sheet",
        yaxis_title=kpi_option,
        legend_title="Nh√¢n vi√™n",
        hovermode="x unified",
        height=500
    )
    st.plotly_chart(fig, use_container_width=True)


else:
    st.info("üìé Vui l√≤ng t·∫£i l√™n file Excel b√°o c√°o ƒë·ªÉ b·∫Øt ƒë·∫ßu.")

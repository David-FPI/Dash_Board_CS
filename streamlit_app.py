import streamlit as st
import pandas as pd
import re
import os

os.system("pip install openpyxl")

st.set_page_config(page_title="üì• ƒê·ªçc T√™n Nh√¢n Vi√™n & T√≠nh KPI", page_icon="üë©‚Äçüíº")

# =====================
# üîß H√†m chu·∫©n ho√° t√™n nh√¢n vi√™n
def clean_employee_name(name: str) -> str:
    name = str(name).strip()
    name = re.sub(r"\n.*", "", name)
    name = re.sub(r"\(.*?\)", "", name)
    name = re.sub(r"\s+", " ", name)
    return name.strip().title()

# =====================
# üîß Chu·∫©n h√≥a ti√™u ƒë·ªÅ c·ªôt
def normalize_header(header):
    header = str(header).lower()
    header = re.sub(r"\s+", " ", header)  # Xo√° kho·∫£ng tr·∫Øng th·ª´a & xu·ªëng d√≤ng
    return header.strip()

# =====================
# üì• ƒê·ªçc t·ª´ng sheet
def extract_data_from_sheet(sheet_df, sheet_name):
    data = []
    rows = sheet_df.shape[0]

    if rows < 3:
        return []

    # Xo√° d√≤ng 1 v√† 2 ‚Üí L·∫•y d√≤ng 3 l√†m header
    sheet_df.columns = sheet_df.iloc[2]
    df = sheet_df[3:].reset_index(drop=True)

    # Chu·∫©n ho√° ti√™u ƒë·ªÅ & d√≤ v·ªã tr√≠ c·ªôt
    header_map = {}
    for col in df.columns:
        col_clean = normalize_header(col)
        if "‚â•10" in col_clean:
            header_map["T∆∞∆°ng t√°c ‚â•10 c√¢u"] = col
        elif "group zalo" in col_clean:
            header_map["L∆∞·ª£ng tham gia group Zalo"] = col
        elif "k·∫øt b·∫°n trong ng√†y" in col_clean:
            header_map["T·ªïng s·ªë k·∫øt b·∫°n trong ng√†y"] = col

    if len(header_map) == 0:
        return []

    # Fill t√™n nh√¢n vi√™n t·ª´ c·ªôt B (index 1)
    df.iloc[:, 1] = df.iloc[:, 1].fillna(method='ffill')

    current_nv = None
    empty_count = 0

    for _, row in df.iterrows():
        name_cell = str(row.iloc[1]).strip()
        if name_cell.lower() in ["ÁªÑÂëòÂêçÂ≠ó", "ÁªüËÆ°", "Ë°®Ê†º‰∏çË¶Å l√†m g√¨", "t·ªïng"]:
            continue
        if name_cell:
            current_nv = re.sub(r"\(.*?\)", "", name_cell).strip()
        if not current_nv:
            continue

        nguon = str(row.iloc[2]).strip() if pd.notna(row.iloc[2]) else ""
        if nguon == "" or nguon.lower() == "nan":
            empty_count += 1
            if empty_count >= 2:
                break
            continue
        else:
            empty_count = 0

        data.append({
            "Nh√¢n vi√™n": current_nv,
            "Ngu·ªìn": nguon,
            "T∆∞∆°ng t√°c ‚â•10 c√¢u": pd.to_numeric(row.get(header_map.get("T∆∞∆°ng t√°c ‚â•10 c√¢u")), errors="coerce") if "T∆∞∆°ng t√°c ‚â•10 c√¢u" in header_map else None,
            "L∆∞·ª£ng tham gia group Zalo": pd.to_numeric(row.get(header_map.get("L∆∞·ª£ng tham gia group Zalo")), errors="coerce") if "L∆∞·ª£ng tham gia group Zalo" in header_map else None,
            "T·ªïng s·ªë k·∫øt b·∫°n trong ng√†y": pd.to_numeric(row.get(header_map.get("T·ªïng s·ªë k·∫øt b·∫°n trong ng√†y")), errors="coerce") if "T·ªïng s·ªë k·∫øt b·∫°n trong ng√†y" in header_map else None,
            "Sheet": sheet_name
        })

    return data

# =====================
# üì§ ƒê·ªçc to√†n b·ªô file Excel
def extract_all_data(file):
    xls = pd.ExcelFile(file)
    all_rows = []

    for sheet_name in xls.sheet_names:
        try:
            df = pd.read_excel(xls, sheet_name=sheet_name, header=None)
            if df.shape[0] < 10 or df.shape[1] < 5:
                continue
            extracted = extract_data_from_sheet(df, sheet_name)
            all_rows.extend(extracted)
        except Exception as e:
            st.warning(f"‚ùå L·ªói ·ªü sheet '{sheet_name}': {e}")

    return pd.DataFrame(all_rows)

# =====================
# üöÄ Giao di·ªán Streamlit
st.title("üì• ƒê·ªçc T√™n Nh√¢n Vi√™n & T√≠nh KPI T·ª´ File Excel B√°o C√°o")

uploaded_files = st.file_uploader("K√©o & th·∫£ nhi·ªÅu file Excel v√†o ƒë√¢y", type=["xlsx"], accept_multiple_files=True)

if uploaded_files:
    all_data = []
    for file in uploaded_files:
        st.write(f"üìÇ ƒêang x·ª≠ l√Ω: `{file.name}`")
        df = extract_all_data(file)
        all_data.append(df)

    df_all = pd.concat(all_data, ignore_index=True)

    if not df_all.empty:
        df_all["Nh√¢n vi√™n chu·∫©n"] = df_all["Nh√¢n vi√™n"].apply(clean_employee_name)

        st.subheader("‚úÖ Danh s√°ch Nh√¢n vi√™n ƒë√£ chu·∫©n h√≥a")
        st.dataframe(df_all[["Nh√¢n vi√™n", "Nh√¢n vi√™n chu·∫©n", "Sheet"]].drop_duplicates(), use_container_width=True)

        st.success(f"‚úÖ T·ªïng s·ªë d√≤ng d·ªØ li·ªáu: {len(df_all)} ‚Äî üë©‚Äçüíª Nh√¢n vi√™n duy nh·∫•t: {df_all['Nh√¢n vi√™n chu·∫©n'].nunique()}")

        # =====================
        # üéØ KPI Dashboard - T√≠nh KPI T√πy Bi·∫øn
        st.markdown("---")
        st.header("üìä KPI Dashboard - T√≠nh KPI T√πy Bi·∫øn")

        st.subheader("üî¢ D·ªØ li·ªáu t·ªïng h·ª£p ban ƒë·∫ßu")
        st.dataframe(df_all, use_container_width=True)

        st.subheader("‚öôÔ∏è C·∫•u h√¨nh KPI Tu·ª≥ Bi·∫øn")

        kpi_cols = ["T∆∞∆°ng t√°c ‚â•10 c√¢u", "L∆∞·ª£ng tham gia group Zalo", "T·ªïng s·ªë k·∫øt b·∫°n trong ng√†y"]
        col1 = st.selectbox("Ch·ªçn c·ªôt A", kpi_cols)
        operation = st.selectbox("Ph√©p to√°n", ["/", "*", "+", "-"])
        col2 = st.selectbox("Ch·ªçn c·ªôt B", kpi_cols)
        kpi_name = st.text_input("T√™n ch·ªâ s·ªë KPI m·ªõi", "Hi·ªáu su·∫•t (%)")

        if st.button("‚úÖ T√≠nh KPI"):
            try:
                if operation == "/":
                    df_all[kpi_name] = df_all[col1] / df_all[col2]
                elif operation == "*":
                    df_all[kpi_name] = df_all[col1] * df_all[col2]
                elif operation == "+":
                    df_all[kpi_name] = df_all[col1] + df_all[col2]
                elif operation == "-":
                    df_all[kpi_name] = df_all[col1] - df_all[col2]
                st.success(f"‚úÖ ƒê√£ t√≠nh KPI m·ªõi: {kpi_name}")
                st.dataframe(df_all[[col1, col2, kpi_name, "Nh√¢n vi√™n chu·∫©n", "Sheet"]], use_container_width=True)
            except Exception as e:
                st.error(f"L·ªói khi t√≠nh KPI: {e}")
    else:
        st.warning("‚ùó Kh√¥ng c√≥ d·ªØ li·ªáu n√†o ƒë∆∞·ª£c tr√≠ch xu·∫•t. Vui l√≤ng ki·ªÉm tra l·∫°i file.")
else:
    st.info("üìé Vui l√≤ng upload file Excel ƒë·ªÉ b·∫Øt ƒë·∫ßu.")

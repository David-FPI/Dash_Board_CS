import streamlit as st
import pandas as pd
import math
from pathlib import Path
import plotly.express as px
import os
os.system("pip install openpyxl")


st.set_page_config(page_title="ƒê·ªçc t√™n nh√¢n vi√™n", page_icon="üìä")

# =====================
# H√†m chu·∫©n h√≥a t√™n nh√¢n vi√™n
def clean_employee_name(name: str) -> str:
    name = str(name).strip()
    name = re.sub(r"\n.*", "", name)  # Xo√° ph·∫ßn sau xu·ªëng d√≤ng n·∫øu c√≥
    name = re.sub(r"\(.*?\)", "", name)  # Xo√° ghi ch√∫ trong ngo·∫∑c ()
    name = re.sub(r"\s+", " ", name)  # Chu·∫©n ho√° kho·∫£ng tr·∫Øng
    return name.strip()

def extract_data_from_sheet(sheet_df, sheet_name):
    data = []
    current_nv = None
    rows = sheet_df.shape[0]
    i = 3  # b·ªè qua 3 d√≤ng ƒë·∫ßu

    while i < rows:
        row = sheet_df.iloc[i]
        # N·∫øu c√≥ t√™n m·ªõi th√¨ c·∫≠p nh·∫≠t current_nv
        if pd.notna(row[1]) and str(row[1]).strip().lower() not in ["", "nan", "ÁªÑÂëòÂêçÂ≠ó", "Ë°®Ê†º‰∏çË¶Å l√†m g√¨"]:
            current_nv = re.sub(r"\(.*?\)", "", str(row[1])).strip()

        empty_count = 0
        j = i
        while j < rows:
            sub_row = sheet_df.iloc[j]

            # N·∫øu c√≥ t√™n nh√¢n vi√™n m·ªõi ·ªü d√≤ng n√†y, c·∫≠p nh·∫≠t l·∫°i current_nv
            if pd.notna(sub_row[1]) and str(sub_row[1]).strip().lower() not in ["", "nan", "ÁªÑÂëòÂêçÂ≠ó", "Ë°®Ê†º‰∏çË¶Å l√†m g√¨"]:
                current_nv = re.sub(r"\(.*?\)", "", str(sub_row[1])).strip()

            nguon = str(sub_row[2]).strip() if pd.notna(sub_row[2]) else ""

            if nguon == "" or nguon.lower() == "nan":
                empty_count += 1
                if empty_count >= 2:
                    break
            else:
                empty_count = 0
                data.append({
                    "Nh√¢n vi√™n": current_nv,
                    "Ngu·ªìn": nguon,
                    "T∆∞∆°ng t√°c ‚â•10 c√¢u": pd.to_numeric(sub_row[15], errors="coerce"),
                    "Group Zalo": pd.to_numeric(sub_row[18], errors="coerce"),
                    "K·∫øt b·∫°n trong ng√†y": pd.to_numeric(sub_row[12], errors="coerce"),
                    "Sheet": sheet_name
                })
            j += 1
        i = j

    return data


# =====================
# H√†m ƒë·ªçc to√†n b·ªô file Excel
def extract_all_data(file):
    xls = pd.ExcelFile(file)
    all_rows = []

    for sheet_name in xls.sheet_names:
        try:
            df = pd.read_excel(xls, sheet_name=sheet_name, header=None)
            if df.shape[0] < 10 or df.shape[1] < 5:
                continue
            extracted = extract_data_from_sheet(df, sheet_name)
            all_rows.extend(extracted)
        except Exception as e:
            st.warning(f"‚ùå L·ªói ·ªü sheet '{sheet_name}': {e}")

    return pd.DataFrame(all_rows)

# =====================
# Upload file
uploaded_files = st.file_uploader("üì• K√©o nhi·ªÅu file Excel v√†o ƒë√¢y", type=["xlsx"], accept_multiple_files=True)

if uploaded_files:
    all_data = []
    for file in uploaded_files:
        st.write(f"üìÇ ƒêang x·ª≠ l√Ω: `{file.name}`")
        df = extract_all_data(file)
        all_data.append(df)

    df_all = pd.concat(all_data, ignore_index=True)

    # Chu·∫©n ho√° t√™n nh√¢n vi√™n
    df_all["Nh√¢n vi√™n chu·∫©n"] = df_all["Nh√¢n vi√™n"].apply(clean_employee_name)

    st.subheader("‚úÖ Danh s√°ch nh√¢n vi√™n ƒë√£ chu·∫©n h√≥a")
    st.dataframe(df_all[["Nh√¢n vi√™n", "Nh√¢n vi√™n chu·∫©n", "Sheet"]].drop_duplicates(), use_container_width=True)

    st.success(f"T·ªïng s·ªë d√≤ng d·ªØ li·ªáu: {len(df_all)} ‚Äî Nh√¢n vi√™n duy nh·∫•t: {df_all['Nh√¢n vi√™n chu·∫©n'].nunique()}")

else:
    st.info("üìé Vui l√≤ng upload file Excel ƒë·ªÉ b·∫Øt ƒë·∫ßu.")
